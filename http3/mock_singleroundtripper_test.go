// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quic-go/quic-go/http3 (interfaces: SingleRoundTripper)
//
// Generated by this command:
//
//	mockgen -typed -build_flags=-tags=gomock -package http3 -destination mock_singleroundtripper_test.go github.com/quic-go/quic-go/http3 SingleRoundTripper
//

// Package http3 is a generated GoMock package.
package http3

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSingleRoundTripper is a mock of SingleRoundTripper interface.
type MockSingleRoundTripper struct {
	ctrl     *gomock.Controller
	recorder *MockSingleRoundTripperMockRecorder
}

// MockSingleRoundTripperMockRecorder is the mock recorder for MockSingleRoundTripper.
type MockSingleRoundTripperMockRecorder struct {
	mock *MockSingleRoundTripper
}

// NewMockSingleRoundTripper creates a new mock instance.
func NewMockSingleRoundTripper(ctrl *gomock.Controller) *MockSingleRoundTripper {
	mock := &MockSingleRoundTripper{ctrl: ctrl}
	mock.recorder = &MockSingleRoundTripperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSingleRoundTripper) EXPECT() *MockSingleRoundTripperMockRecorder {
	return m.recorder
}

// OpenStream mocks base method.
func (m *MockSingleRoundTripper) OpenStream(arg0 context.Context) (RequestStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenStream", arg0)
	ret0, _ := ret[0].(RequestStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenStream indicates an expected call of OpenStream.
func (mr *MockSingleRoundTripperMockRecorder) OpenStream(arg0 any) *MockSingleRoundTripperOpenStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenStream", reflect.TypeOf((*MockSingleRoundTripper)(nil).OpenStream), arg0)
	return &MockSingleRoundTripperOpenStreamCall{Call: call}
}

// MockSingleRoundTripperOpenStreamCall wrap *gomock.Call
type MockSingleRoundTripperOpenStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSingleRoundTripperOpenStreamCall) Return(arg0 RequestStream, arg1 error) *MockSingleRoundTripperOpenStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSingleRoundTripperOpenStreamCall) Do(f func(context.Context) (RequestStream, error)) *MockSingleRoundTripperOpenStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSingleRoundTripperOpenStreamCall) DoAndReturn(f func(context.Context) (RequestStream, error)) *MockSingleRoundTripperOpenStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RoundTrip mocks base method.
func (m *MockSingleRoundTripper) RoundTrip(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoundTrip", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoundTrip indicates an expected call of RoundTrip.
func (mr *MockSingleRoundTripperMockRecorder) RoundTrip(arg0 any) *MockSingleRoundTripperRoundTripCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoundTrip", reflect.TypeOf((*MockSingleRoundTripper)(nil).RoundTrip), arg0)
	return &MockSingleRoundTripperRoundTripCall{Call: call}
}

// MockSingleRoundTripperRoundTripCall wrap *gomock.Call
type MockSingleRoundTripperRoundTripCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSingleRoundTripperRoundTripCall) Return(arg0 *http.Response, arg1 error) *MockSingleRoundTripperRoundTripCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSingleRoundTripperRoundTripCall) Do(f func(*http.Request) (*http.Response, error)) *MockSingleRoundTripperRoundTripCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSingleRoundTripperRoundTripCall) DoAndReturn(f func(*http.Request) (*http.Response, error)) *MockSingleRoundTripperRoundTripCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
